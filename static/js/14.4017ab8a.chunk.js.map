{"version":3,"sources":["pages/FAQ/FAQ.js"],"names":["Search","Input","Panel","Collapse","Title","Typography","Text","FAQ","useTranslation","t","useState","page","setPage","search","setSearch","translate","useCallback","key","options","questions","useMemo","Array","map","_","i","answer","question","data","keys","toLowerCase","split","filter","length","e","some","includes","justify","style","width","xs","sm","md","lg","xl","level","textAlign","type","allowClear","enterButton","size","placeholder","onChange","target","value","direction","ghost","expandIconPosition","expandIcon","isActive","MinusOutlined","className","PlusOutlined","slice","header","strong","marginBottom","current","total","pageSize"],"mappings":"sRAgBQA,EAAWC,IAAXD,OACAE,EAAUC,IAAVD,MACAE,EAAgBC,IAAhBD,MAAOE,EAASD,IAATC,KAEFC,EAAM,WAAO,IAAD,EACXC,cAALC,EADgB,sBAECC,mBAAS,GAFV,mBAEhBC,EAFgB,KAEVC,EAFU,OAGKF,mBAAS,IAHd,mBAGhBG,EAHgB,KAGRC,EAHQ,KAOjBC,EAAYC,uBAAY,SAACC,EAAKC,GAAN,OAAkBT,EAAE,OAAD,OAAQQ,GAAOC,KAAU,CAACT,IAErEU,EAAYC,mBAChB,kBACE,YAAI,IAAIC,MAAM,IAAIC,KAAI,SAACC,EAAGC,GAAJ,MAAW,CAC/BC,OAAQV,EAAU,GAAD,OAAIS,EAAJ,YACjBE,SAAUX,EAAU,GAAD,OAAIS,EAAJ,oBAEvB,CAACT,IAGGY,EAAOP,mBAAQ,WACnB,IAAMQ,GAAQf,GAAU,IACrBgB,cACAC,MAAM,KACNC,QAAO,SAAAd,GAAG,QAAMA,KAEnB,OAAoB,IAAhBW,EAAKI,OAAqBb,EAEvBA,EAAUY,QAAO,SAAAE,GAAC,OACvBL,EAAKM,MAAK,SAAAjB,GAAG,OAAIgB,EAAEP,SAASG,cAAcM,SAASlB,WAEpD,CAACE,EAAWN,IASf,OACE,qCACE,cAAC,IAAD,CAAKuB,QAAQ,SAASC,MAAO,CAAEC,MAAO,QAAtC,SACE,eAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAzC,UACE,cAACvC,EAAD,CAAOwC,MAAO,EAAGP,MAAO,CAAEQ,UAAW,UAArC,SACG9B,EAAU,WAGb,cAACX,EAAD,CAAOwC,MAAO,EAAGE,KAAK,YAAYT,MAAO,CAAEQ,UAAW,UAAtD,SACG9B,EAAU,cAGb,cAACf,EAAD,CACE+C,YAAU,EACVC,aAAW,EACXC,KAAK,QACLC,YAAanC,EAAU,eACvBoC,SAAU,SAAAlB,GAAC,aAAInB,EAAS,UAACmB,EAAEmB,cAAH,aAAC,EAAUC,eAKzC,cAAC,IAAD,IAEA,eAAC,IAAD,CAAOhB,MAAO,CAAEC,MAAO,QAAUgB,UAAU,WAAWL,KAAM,GAA5D,UACE,cAAC,IAAD,CAAUM,OAAK,EAACC,mBAAmB,QAAQC,WAhCzB,SAAC,GACvB,OADwC,EAAfC,SAEhB,cAACC,EAAA,EAAD,CAAeC,UAAU,oBAE3B,cAACC,EAAA,EAAD,CAAcD,UAAU,qBA4B3B,SACG,YAAIjC,EAAKmC,MA3DD,IA2DmBnD,EAAO,GA3D1B,GA2DyCA,IAAOW,KAAI,SAAAW,GAAC,OAC5D,eAAC/B,EAAD,CAAwB6D,OAAQ,cAACzD,EAAD,CAAM0D,QAAM,EAAZ,SAAc/B,EAAEP,WAAhD,UACE,cAACpB,EAAD,CAAMwC,KAAK,YAAX,SAAwBb,EAAER,SAC1B,cAAC,IAAD,CAASY,MAAO,CAAE4B,aAAc,OAFtBhC,EAAEP,eAOlB,cAAC,IAAD,CAAKU,QAAQ,MAAb,SACE,cAAC,IAAD,CACEa,KAAK,QACLiB,QAASvD,EACTwD,MAAOxC,EAAKK,OACZoC,SAxEO,GAyEPjB,SAAU,SAAAE,GAAK,OAAIzC,EAAQyC","file":"static/js/14.4017ab8a.chunk.js","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react'\n\nimport { useTranslation } from 'react-i18next'\n\nimport {\n  Col,\n  Row,\n  Input,\n  Space,\n  Divider,\n  Collapse,\n  Pagination,\n  Typography\n} from 'antd'\nimport { MinusOutlined, PlusOutlined } from '@ant-design/icons'\n\nconst { Search } = Input\nconst { Panel } = Collapse\nconst { Title, Text } = Typography\n\nexport const FAQ = () => {\n  const [t] = useTranslation()\n  const [page, setPage] = useState(1)\n  const [search, setSearch] = useState('')\n\n  const pageSize = 10\n\n  const translate = useCallback((key, options) => t(`faq:${key}`, options), [t])\n\n  const questions = useMemo(\n    () =>\n      [...new Array(4)].map((_, i) => ({\n        answer: translate(`${i}:answer`),\n        question: translate(`${i}:question`)\n      })),\n    [translate]\n  )\n\n  const data = useMemo(() => {\n    const keys = (search || '')\n      .toLowerCase()\n      .split(' ')\n      .filter(key => !!key)\n\n    if (keys.length === 0) return questions\n\n    return questions.filter(e =>\n      keys.some(key => e.question.toLowerCase().includes(key))\n    )\n  }, [questions, search])\n\n  const getExpandedIcon = ({ isActive }) => {\n    if (isActive) {\n      return <MinusOutlined className='anticon-primary' />\n    }\n    return <PlusOutlined className='anticon-primary' />\n  }\n\n  return (\n    <>\n      <Row justify='center' style={{ width: '100%' }}>\n        <Col xs={24} sm={20} md={16} lg={14} xl={12}>\n          <Title level={2} style={{ textAlign: 'center' }}>\n            {translate('title')}\n          </Title>\n\n          <Title level={5} type='secondary' style={{ textAlign: 'center' }}>\n            {translate('subtitle')}\n          </Title>\n\n          <Search\n            allowClear\n            enterButton\n            size='large'\n            placeholder={translate('placeholder')}\n            onChange={e => setSearch(e.target?.value)}\n          />\n        </Col>\n      </Row>\n\n      <Divider />\n\n      <Space style={{ width: '100%' }} direction='vertical' size={32}>\n        <Collapse ghost expandIconPosition='right' expandIcon={getExpandedIcon}>\n          {[...data.slice(pageSize * (page - 1), pageSize * page)].map(e => (\n            <Panel key={e.question} header={<Text strong>{e.question}</Text>}>\n              <Text type='secondary'>{e.answer}</Text>\n              <Divider style={{ marginBottom: 0 }} />\n            </Panel>\n          ))}\n        </Collapse>\n\n        <Row justify='end'>\n          <Pagination\n            size='small'\n            current={page}\n            total={data.length}\n            pageSize={pageSize}\n            onChange={value => setPage(value)}\n          />\n        </Row>\n      </Space>\n    </>\n  )\n}\n"],"sourceRoot":""}