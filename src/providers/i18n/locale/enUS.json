{
  "project": {
    "name": "FRISK",
    "language": "enUS"
  },
  "languages": {
    "ptBR": {
      "language": "Portuguese",
      "country": "Brazil"
    },
    "enUS": {
      "language": "English",
      "country": "United States"
    }
  },
  "links": {
    "faq": "FAQ",
    "tutorial": "Tutorial",
    "dashboard": "Dashboard",
    "error404": "Page not found"
  },
  "erros": {
    "404": {
      "title": "Page not found!",
      "description": "The page you looking for isn't found :(",
      "extra": "We suggest you back to home",
      "back": "Back to home"
    }
  },
  "tutorial": {
    "anchor": {
      "intro": "Introduction",
      "background": "Background",
      "task1": "Prerequisites",
      "task2": "Create session",
      "task3": "Modify website",
      "task4": "Create docker image",
      "task5": "Spawn docker container",
      "task6": "Share session",
      "task7": "Close session",
      "task8": "Execute session"
    },
    "intro": {
      "title": "Using FRISK to create a sample based on a server-side web framework",
      "date": "Dec. 15, 2018",
      "subtitle": "This tutorial shows how to use FRISK to create and deploy a minimalistic Express.js app and share your work with someone. A very similar method can be used to prototype apps for other frameworks."
    },
    "background": {
      "description": "Background. It is important that the reader understands the following concepts before continuing.",
      "session": {
        "title": "(FRISK) Session:",
        "content": "The 2h period a developer can interact with FRISK. Sessions are anonymous, which means you don't have an account to save your work, but note that you can continue and share your work by pressing the share icon. When accessing that link, FRISK creates a new session based on the contents stored in the original session."
      },
      "virtualMachine": {
        "title": "(FRISK) Virtual Machine (VM)",
        "content": "A machine that will be hosted in our servers. You can create as many VMs as necessary for the period of a session. This should be important when working with microservices."
      },
      "docker": {
        "title": "(Docker) Image:",
        "content1": "A file encapsulating the OS that will be used to run your example. This file is not visible to you (it is stored in the Docker registry). Docker uses the file",
        "code1": "Dockerfile",
        "content2": "--this one visible to the user-- to create an image. One can find the images available in a virtual machine using the command",
        "code2": "$> docker ps -a",
        "end": "."
      },
      "container": {
        "title": "(Docker) Container",
        "content1": "Conceptually, a container is an image in execution; it is called that way because it isolates a running environment from other containers. One can find all containers available in a virtual machine using the command",
        "code1": "$> docker ps -a",
        "end": "."
      },
      "card": {
        "title": "(FRISK) Card:",
        "content1": "A card is a FRISK abstraction to bootstrap a FRISK session. A developer can use a card to start a session with coding artifacts as to speedup prototyping. These artifacts include a",
        "code1": "Dockerfile",
        "content2": "and boilerplate code associated with the purpose of the card."
      }
    },
    "task1": {
      "title": "Task 1: Check prerequisites",
      "content": "You will need a modern browser to complete this tutorial. We will explain the pieces of Express.js code covered and the Docker commands discussed along the way, so prior knowledge on these is not needed."
    },
    "task2": {
      "title": "Task 2: Create a session",
      "content1": "Select the Express.js card from the home page.",
      "content2": "This selection has the following effects:",
      "option1": "it creates a FRISK session with one virtual machine in it",
      "option2": {
        "content1": "it adds a",
        "code1": "Dockerfile",
        "content2": "for Express.js (it does",
        "strong1": "not",
        "content3": "create image or container)"
      },
      "option3": "it adds boilerplate code --index.js-- for a web service"
    },
    "task3": {
      "title": "Task 3: Modify the website",
      "content1": "Before continuing, make sure you are in the",
      "code1": "/root",
      "content2": "directory by typing",
      "code2": "pwd",
      "content3": "from the shell. This is the base directory for making changes in your environment. After that, click the \"Editor\" button. You can make changes to the files using the file editor that will show up. Alternatively, you can use",
      "code3": "vim",
      "content4": "from the shell, if you prefer.",
      "content5": "After those checks, modify the file",
      "code4": "/root/index.js",
      "content6": "(shown below) to print a different output. This file contains Express.js code (a dialect of Node.js) to respond to an HTTP request to the base URL of your app (see string",
      "code5": "'/'",
      "content7": "at line 4). Modify the string",
      "code6": "\"Hello world!\"",
      "content8": "however you want. Note that the string is passed to the function",
      "code7": "send",
      "content9": "from object",
      "code8": "res",
      "content10": ", which denotes the response to an HTTP request.",
      "lines1": "1: var express = require('express');",
      "lines2": "2: var app = express();",
      "lines3": "3:",
      "lines4": "4: app.get('/', function(req, res) {",
      "lines5": "5:     res.send(\"Hello world!\"); // <-- here",
      "lines6": "6: });",
      "lines7": "7:",
      "lines8": "8: app.listen(8080);"
    },
    "task4": {
      "title": "Task 4: Create the Docker image",
      "content1": "If you don't remember the definition a Docker image, please check the definitions at the beginning of this tutorial.",
      "content2": "Display the contents of the Dockerfile.",
      "code1": "$> cat Dockerfile",
      "lines1": "FROM node:6.9.5",
      "lines2": "WORKDIR /app",
      "lines3": "RUN npm install --save express",
      "lines4": "COPY . /app",
      "lines5": "EXPOSE 8080",
      "lines6": "CMD node index.js",
      "content3": "Let's see what each of these commands do.",
      "from": {
        "title": "FROM",
        "content1": "specifies the base image of the new image you're creating (yes, images are layered). For this example, the base image is",
        "code1": "node:6.9.5",
        "content2": ", which builds on some Linux distribution."
      },
      "run": {
        "title": "RUN",
        "content": "executes the corresponding command in a new layer on top of the current image. The resulting image will be used in the following commands from the Dockerfile."
      },
      "workdir": {
        "title": "WORKDIR",
        "content": "sets the working directory that is used by other Docker commands."
      },
      "copy": {
        "title": "COPY",
        "content1": "copies files from the host (in this case a FRISK VM) into the image. In this example, the",
        "code1": "COPY",
        "content2": "command is used to copy the contents of the",
        "code2": "/root",
        "content3": "directory (in the host) into the",
        "code3": "app",
        "content4": "directory (in the image)."
      },
      "expose": {
        "title": "EXPOSE",
        "content": "sets which port(s) the application uses."
      },
      "cmd": {
        "title": "CMD",
        "content": "specifies what command to run when a container is started from the image."
      },
      "content4": "Use the following command to create the image.",
      "code2": "$> docker image build --tag expressapp:1.0 .",
      "the": "The",
      "code3": "--tag",
      "content6": "option specifies a custom name for later reference.",
      "code4": ".",
      "content7": "at the end of the command tells Docker to use the current directory to look for the file",
      "code5": "Dockerfile",
      "content8": "Execution of this command generates a good amount of output on screen (check if your output matches ours). To sum, this command downloads all dependent images, creates the image",
      "express": "expressapp:1.0",
      "content9": "based on those pieces, and stores it in the Docker registry. It does",
      "strong1": "not",
      "content10": "create containers. Check if the image",
      "content11": "is available in the registry with the command",
      "code6": "$> docker images",
      "end": "."
    },
    "task5": {
      "title": "Task 5: Spawn the Docker container",
      "content1": "Use the following command to start a new container from the image you created.",
      "code1": "$> docker run --publish 8080:8080 --name expressapp expressapp:1.0",
      "content2": "Recall that the",
      "code2": "CMD",
      "content3": "command (from the Dockerfile) is responsible for running the Express.js webserver on the container. As this container will be running an Express.JS web server, we need to connect the ports on the VM and the container. The option",
      "code3": "--publish host_port:container_port",
      "content4": "does that. It enables traffic to the host (VM) to be forwarded to the container, which is running your service.",
      "content5": "At this point, your container should be up and running. You can check that two ways.",
      "content6": "Copy the ssh command on the top of the page and paste it in on a terminal (any machine) and then type",
      "code4": "top",
      "content7": ". You should be able to see referring to the name",
      "code5": "expressapp",
      "content8": ". This is the container process.",
      "content9": "Click on the link",
      "strong1": "8080",
      "content10": "that should have appeared on the top of your session screen once the container started to run. Your browser should open a new tab for that URL and you should see the message you defined in the file",
      "code6": "index.js",
      "end": "." 
    },
    "task6": {
      "title": "Task 6: Share (a copy of) your session",
      "content": "There are two different ways to share work in FRISK. The first alternative provides access to the same session via SSH; the second alternative creates a copy of the session. The first alternative is useful, for example, to ask for help of a colleague to solve a problem in your setup whereas the second alternative is useful to share your work with strangers. Let us focus on the second alternative.",
      "step1": "Identify the share-icon button that appears at the top of your screen.",
      "step2": "Click on that button, FRISK will show an URL associated with your session.",
      "step3": {
        "content1": "Copy-and-paste that URL on the browser (it can be a different browser running on a different machine). A click on that link will result in the creation of a new session based on the contents of the original session. The sessions are different! A change in one session is",
        "strong1": "not",
        "content2": "visible in the other session. If you want to share a running session (without copying it), use the SSH button."
      },
      "step4": {
        "content1": "Make a different change on the string message in the",
        "code1": "index.js",
        "content2": "file and repeat the commands in this tutorial to confirm that both services are running and they respond with different strings."
      }
    },
    "task7": {
      "title": "Task 7: Close your session(s)",
      "content": "Remove the VM from your session and then close the session. The maximum time of a session is 2h, but it is good practice to save time and space. You can continue your work anytime if you keep the URL for your session."
    },
    "task8": {
      "title": "Task 8: How to execute your session(s)",
      "content1": "To run an already created",
      "card": "Card",
      "content2": ", you need to click in the",
      "build": "BUILD",
      "content3": "button.",
      "content4": "If the",
      "content5": "are using a database, it is necessary to use the",
      "italic1": "docker-compose",
      "content6": "command. This command is required because there are more than one service running in the same",
      "italic2": "Docker",
      "content7": "in differents ports. In that cases, instead clicking the",
      "content8": "button, you must click in the",
      "strong1": "BUILD DOCKER COMPOSE",
      "content9": "button, which one is going to run the command down in the console provided:",
      "code1": "docker-compose up"
    }
  },
  "faq": {
    "title": "Frequently Asked Questions",
    "subtitle": "Do you have any questions about how the platform works? search here",
    "placeholder": "Type your question here",
    "0": {
      "question": "explain how we obtained these templates",
      "answer": "we still don't know the answer to this question :("
    },
    "1": {
      "question": "explain how it works",
      "answer": "we still don't know the answer to this question :("
    },
    "2": {
      "question": "explain that we use alpine linux and not debian-based linux",
      "answer": "we still don't know the answer to this question :("
    },
    "3": {
      "question": "explain that we do not persist images and VM changes. we only store the files inside /root",
      "answer": "we still don't know the answer to this question :("
    }
  },
  "dashboard": {
    "title": "FRISK!",
    "subtitle": "is a tool for prototyping and sharing server-side projects compatible with Docker technology! FRISK is an on-going project. Hence, there might be interesting features that have not yet been implemented, or even unexpected behavior.",
    "topProjects": "Top Repositories",
    "recentIssues": "Most recent issues",
    "seeProjects": "see all repositories",
    "seeGithub": "open on Github",
    "seeIssues": "see issues",
    "openSession": "open the session",
    "languages": "languages:",
    "addProject": "Add new repository",
    "tags": {
      "OB": "observed behavior",
      "EB": "expected behavior",
      "S2R": "steps to reproduce"
    }
  }
}
